// TheodorGraph
N: () -> integer
N() = 3
Max: (integer) -> integer
Max(n) =2^(n+1)

export TheodorGraph(N()) {"TheodorGraph"} {vLabel} {eLabel}

TheodorGraph: (integer) -> graph
TheodorGraph(n) = (vertecies(n), edges(n), src, dst)

// Edges
edges: (integer) -> set
edges(n) = eUnion(emptySet(), n, 0) union eUnion(emptySet(), n-1, 1)

eUnion: (set, integer, integer) -> set
eUnion(s, n, type) = 
	| n > 1 = s union eUnion(eSet(n, type), n - 1, type)
	| n == 1 = s union eSet(n, type)

eSet: (integer, integer) -> set
eSet(n, type) = {v[i,j,t] | n-1<=[i]<=n-1, 0<=[j]<Max(n), type<=[t]<=type}

// Vertecies
vertecies: (integer) -> set
vertecies(n) = vUnion(emptySet(), n)

vUnion: (set, integer) -> set
vUnion(s, n) = 
	| n > 1 = s union vUnion(vSet(n), n - 1)
	| n == 1 = s union vSet(n)

vSet: (integer) -> set
vSet(n) = {v[i,j] | n-1<=[i]<=n-1, 0<=[j]<Max(n)}

// Src Dst
src: (element) -> element
src(e) =
	| e[i,j,c], c == 0 = element[i, j]
	| e[i,j,c], c == 1 = element[i, j]

dst: (element) -> element
dst(e) =
	| e[i,j,c], c == 0 = element[i, (j + 1) mod Max(i)]
	| e[i,j,c], c == 1 = element[i+1, j*2]


// Labels 
vLabel: (element) -> string
vLabel(e) =
	| e[i,j] = "Vertex: " + i + ", " + j

eLabel: (element) -> string
eLabel(e) =
	| e[i,j,k] = "Edge: " + i + ", " + j + ", " + k

// Helper
emptySet: () -> set
emptySet() = {v[i] | 0<=[i]<1} intersection {v[i] | 1<=[i]<2}