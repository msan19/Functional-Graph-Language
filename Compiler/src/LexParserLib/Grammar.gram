grammar Grammar
{
    options
    {
        Axiom = "Prog";
        Separator = "SEPARATOR";
    }
    terminals
    {
        id            -> [a-zA-Z] [a-zA-Z0-9]* ;
        realNumber    -> [0-9]+ '.' [0-9]+ ;
        integerNumber -> [0-9]+ ;

        WHITE_SPACE   -> U+0020 | U+0009 | U+000A | U+000B | U+000C | U+000D | '//'.*'\n';
        SEPARATOR     -> WHITE_SPACE+ ;
    }
    rules
    {
        Prog          -> Declarations ;
        Declarations  -> Declarations Declaration
                      |  Declaration ;
        Declaration   -> 'export' Expression
                      |  Func '=' Expression
                      |  Func '=' Conditions ;
        Conditions    -> Conditions Condition
                      |  Condition ;
        Condition     -> '|' Elements ',' Expression '=' Expression
                      |  '|' Elements '=' Expression
                      |  '|' Expression '=' Expression
                      |  '|' '_' '=' Expression ;
        Elements      -> Elements ',' Element
                      |  Element ;
        Element       -> id '[' Ids ']' ;
        Func          -> id ':' FuncTypeDecl id '(' ')'
                      |  id ':' FuncTypeDecl id '(' Ids ')' ;
        FuncTypeDecl  -> '(' Types ')' '->' Type
                      |  '(' ')' '->' Type ;
        Types         -> Types ',' Type
                      |  Type ;
        Type          -> 'integer'
                      |  'real'
                      |  'boolean'
                      |  'set'
                      |  'element'
                      |  FuncTypeDecl ;
        Ids           -> Ids ',' id
                      |  id ;
        Bounds        -> Bounds ',' Bound
                      |  Bound ;
        Bound         -> NumExpression BoundComp '[' id ']' BoundComp NumExpression
                      |  '[' id ']' '==' NumExpression ;
        Expression    -> Expression '!=' MaxTerm
                      |  Expression '==' MaxTerm
                      |  MaxTerm ;
        MaxTerm	      -> MaxTerm 'or' MinTerm
                      |  MinTerm ;
        MinTerm	      -> MinTerm 'and' LogicTerm
                      |  LogicTerm ;
        LogicTerm     -> 'not' LogicTerm
                      |  NumExpression Compare NumExpression
                      |  Exponent 'in' SetExpression
                      |  SetExpression 'subset' SetExpression
                      |  NumExpression ;
        Compare	      -> '>='
                      |  '>'
                      |  BoundComp ;
        BoundComp     -> '<'
                      |  '<=' ;
        NumExpression -> NumExpression '+' Term
                      |  NumExpression '-' Term
                      | '-' Term
                      |  Term ;
        Term          -> Term '*' Factor
                      |  Term '/' Factor
                      |  Term 'mod' Factor
                      |  Factor ;
        Factor        -> Factor '^' Exponent
                      |  SetExpression ;
        SetExpression -> SetExpression 'union' SetTerm
                      |  SetTerm ;
        SetTerm       -> SetTerm 'intersection' Exponent
                      |  Exponent ;
        Exponent      -> id
                      |  '|' Expression '|'
                      |  '(' Expression ')'
                      |  Literal
                      |  id '(' Expressions ')'
                      |  id '(' ')' 
                      |  '{' Element '|' Bounds '}'
                      |  '{' Element '|' Bounds ',' Expression '}'
                      |  'element' '[' Expressions ']' ;
        Expressions   -> Expression ',' Expressions
                      |  Expression ;
        Literal	      -> realNumber
                      |  integerNumber
                      |  'true'
                      |  'false' ;
    }
}