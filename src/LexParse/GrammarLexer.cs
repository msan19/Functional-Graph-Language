/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */

using System.CodeDom.Compiler;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Grammar
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	[GeneratedCode("Hime.SDK", "3.5.1.0")]
	internal class GrammarLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(GrammarLexer), "GrammarLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		[GeneratedCode("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal id
			/// </summary>
			public const int TerminalId = 0x0003;
			/// <summary>
			/// The unique identifier for terminal realNumber
			/// </summary>
			public const int TerminalRealNumber = 0x0004;
			/// <summary>
			/// The unique identifier for terminal integerNumber
			/// </summary>
			public const int TerminalIntegerNumber = 0x0005;
			/// <summary>
			/// The unique identifier for terminal WHITE_SPACE
			/// </summary>
			public const int TerminalWhiteSpace = 0x0006;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x0007;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		[GeneratedCode("Hime.SDK", "3.5.1.0")]
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0003, "id"),
			new Symbol(0x0004, "realNumber"),
			new Symbol(0x0005, "integerNumber"),
			new Symbol(0x0006, "WHITE_SPACE"),
			new Symbol(0x0007, "SEPARATOR"),
			new Symbol(0x0016, "export"),
			new Symbol(0x0017, "="),
			new Symbol(0x0018, ":"),
			new Symbol(0x0019, "("),
			new Symbol(0x001A, ")"),
			new Symbol(0x001B, "->"),
			new Symbol(0x001C, ","),
			new Symbol(0x001D, "integer"),
			new Symbol(0x001E, "real"),
			new Symbol(0x001F, "+"),
			new Symbol(0x0020, "-"),
			new Symbol(0x0021, "*"),
			new Symbol(0x0022, "/"),
			new Symbol(0x0023, "mod"),
			new Symbol(0x0024, "^"),
			new Symbol(0x0025, "|") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public GrammarLexer(string input) : base(commonAutomaton, terminals, 0x0007, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public GrammarLexer(TextReader input) : base(commonAutomaton, terminals, 0x0007, input) {}
	}
}
